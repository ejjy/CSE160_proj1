<nesc xmlns="http://www.tinyos.net/nesC">
  <wiring>
    <wire loc="54:/home/robert/local/tinyos-2.1.1/tos/system/TinySchedulerC.nc">
      <from><interface-ref name="TaskBasic" scoped="" ref="0x2aaaab44f728"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2aaaab5082b0"/></to>
    </wire>
    <wire loc="53:/home/robert/local/tinyos-2.1.1/tos/system/TinySchedulerC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x2aaaab44ebe8"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x2aaaab50a448"/></to>
    </wire>
    <wire loc="55:/home/robert/local/tinyos-2.1.1/tos/system/TinySchedulerC.nc">
      <from><interface-ref name="McuSleep" scoped="" ref="0x2aaaab511758"/></from>
      <to><interface-ref name="McuSleep" scoped="" ref="0x2aaaab521660"/></to>
    </wire>
  </wiring>
  <components>
    <component qname="Node" loc="20:/home/robert/workspace/proj1/src/Node.nc">
      <module/>
    </component>
    <component qname="TinySchedulerC" loc="46:/home/robert/local/tinyos-2.1.1/tos/system/TinySchedulerC.nc">
      <documentation loc="34:/home/robert/local/tinyos-2.1.1/tos/system/TinySchedulerC.nc">
        <short>&#10; The TinyOS scheduler.</short>
        <long>&#10; The TinyOS scheduler. It provides two interfaces: Scheduler,&#10; for TinyOS to initialize and run tasks, and TaskBasic, the simplext&#10; class of TinyOS tasks (reserved always at-most-once posting,&#10; FIFO, parameter-free). For details and information on how to&#10; replace the scheduler, refer to TEP 106.&#10;&#10; @author  Phil Levis&#10; @date    August 7 2005&#10; @see     TEP 106: Tasks and Schedulers&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SchedulerBasicP" loc="54:/home/robert/local/tinyos-2.1.1/tos/system/SchedulerBasicP.nc" safe="">
      <module/>
    </component>
    <component qname="McuSleepC" loc="48:/home/robert/local/tinyos-2.1.1/tos/chips/atm128/McuSleepC.nc" safe="">
      <documentation loc="34:/home/robert/local/tinyos-2.1.1/tos/chips/atm128/McuSleepC.nc">
        <short>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the Atmega128.</short>
        <long>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the Atmega128. Power state calculation code copied from Rob&#10; Szewczyk's 1.x code in HPLPowerManagementM.nc.&#10;&#10; &#60;pre>&#10;  $Id: McuSleepC.nc,v 1.11 2010-06-29 22:07:43 scipio Exp $&#10; &#60;/pre>&#10;&#10; @author Philip Levis&#10; @author Robert Szewczyk&#10; @date   October 26, 2005&#10;</long>
      </documentation>
      <module/>
    </component>
  </components>
  <interfaces>
    <interface provided="0" name="AMControl" ref="0x2aaaab5d0870" loc="25:/home/robert/workspace/proj1/src/Node.nc">
      <component-ref qname="Node"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMControl" scoped="" ref="0x2aaaab5d0870"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x2aaaab5d0bc0"/>
        <function-ref name="stopDone" scoped="" ref="0x2aaaab5d0d48"/>
        <function-ref name="start" scoped="" ref="0x2aaaab5c6020"/>
        <function-ref name="stop" scoped="" ref="0x2aaaab5c61a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Boot" ref="0x2aaaab5b3940" loc="21:/home/robert/workspace/proj1/src/Node.nc">
      <component-ref qname="Node"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x2aaaab5b3940"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x2aaaab5b3c90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PeriodicTimer" ref="0x2aaaab5eae18" loc="27:/home/robert/workspace/proj1/src/Node.nc">
      <component-ref qname="Node"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PeriodicTimer" scoped="" ref="0x2aaaab5eae18"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2aaaab4cd608"/>
            <typename><typedef-ref name="TMilli" ref="0x2aaaab4cd960"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x2aaaab5f70c0"/>
        <function-ref name="fired" scoped="" ref="0x2aaaab5e4798"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x2aaaab5f84d8"/>
        <function-ref name="isOneShot" scoped="" ref="0x2aaaab5f8088"/>
        <function-ref name="getdt" scoped="" ref="0x2aaaab5f7960"/>
        <function-ref name="gett0" scoped="" ref="0x2aaaab5f7510"/>
        <function-ref name="isRunning" scoped="" ref="0x2aaaab5e4be8"/>
        <function-ref name="startPeriodic" scoped="" ref="0x2aaaab5cf9e0"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x2aaaab5f8aa8"/>
        <function-ref name="startOneShot" scoped="" ref="0x2aaaab5cfe80"/>
        <function-ref name="stop" scoped="" ref="0x2aaaab5e4348"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Random" ref="0x2aaaab5c5e10" loc="24:/home/robert/workspace/proj1/src/Node.nc">
      <component-ref qname="Node"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Random" scoped="" ref="0x2aaaab5c5e10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0x2aaaab5c71a8"/>
        <function-ref name="rand32" scoped="" ref="0x2aaaab5c7330"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="NeighborPool" ref="0x2aaaab5fad10" loc="29:/home/robert/workspace/proj1/src/Node.nc">
      <component-ref qname="Node"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="NeighborPool" scoped="" ref="0x2aaaab5fad10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Pool"/>
        <arguments>
          <type-tag size="I:3" alignment="I:1"><nx_struct-ref name="neighbor" ref="0x2aaaab5b60b8"/>
            <typename><typedef-ref name="neighbor" ref="0x2aaaab5b68c0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x2aaaab5fecb8"/>
        <function-ref name="maxSize" scoped="" ref="0x2aaaab5fe1c0"/>
        <function-ref name="empty" scoped="" ref="0x2aaaab5ff8b8"/>
        <function-ref name="put" scoped="" ref="0x2aaaab5fe610"/>
        <function-ref name="size" scoped="" ref="0x2aaaab5ffd08"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Neighbors" ref="0x2aaaab5f6020" loc="28:/home/robert/workspace/proj1/src/Node.nc">
      <component-ref qname="Node"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Neighbors" scoped="" ref="0x2aaaab5f6020"/></type-interface>
      <instance>
        <interfacedef-ref qname="List"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:3" alignment="I:1"><nx_struct-ref name="neighbor" ref="0x2aaaab5b60b8"/>
              <typename><typedef-ref name="neighbor" ref="0x2aaaab5b68c0"/></typename>
            </type-tag>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="size" scoped="" ref="0x2aaaab5f3b18"/>
        <function-ref name="front" scoped="" ref="0x2aaaab5f4dc8"/>
        <function-ref name="isEmpty" scoped="" ref="0x2aaaab5f36c8"/>
        <function-ref name="get" scoped="" ref="0x2aaaab5f2020"/>
        <function-ref name="remove" scoped="" ref="0x2aaaab5f2910"/>
        <function-ref name="isFull" scoped="" ref="0x2aaaab5f24c0"/>
        <function-ref name="pushback" scoped="" ref="0x2aaaab5f6b68"/>
        <function-ref name="popfront" scoped="" ref="0x2aaaab5f4978"/>
        <function-ref name="popback" scoped="" ref="0x2aaaab5f4528"/>
        <function-ref name="pushfront" scoped="" ref="0x2aaaab5f4088"/>
        <function-ref name="back" scoped="" ref="0x2aaaab5f3278"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketList" ref="0x2aaaab5bbb40" loc="23:/home/robert/workspace/proj1/src/Node.nc">
      <component-ref qname="Node"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketList" scoped="" ref="0x2aaaab5bbb40"/></type-interface>
      <instance>
        <interfacedef-ref qname="List"/>
        <arguments>
          <type-tag size="I:28" alignment="I:1"><nx_struct-ref name="pack" ref="0x2aaaab587120"/>
            <typename><typedef-ref name="pack" ref="0x2aaaab586568"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="size" scoped="" ref="0x2aaaab5b9648"/>
        <function-ref name="front" scoped="" ref="0x2aaaab5b2928"/>
        <function-ref name="isEmpty" scoped="" ref="0x2aaaab5b91f8"/>
        <function-ref name="get" scoped="" ref="0x2aaaab5b9a98"/>
        <function-ref name="remove" scoped="" ref="0x2aaaab5c8470"/>
        <function-ref name="isFull" scoped="" ref="0x2aaaab5c8020"/>
        <function-ref name="pushback" scoped="" ref="0x2aaaab5b46f0"/>
        <function-ref name="popfront" scoped="" ref="0x2aaaab5b24d8"/>
        <function-ref name="popback" scoped="" ref="0x2aaaab5b2088"/>
        <function-ref name="pushfront" scoped="" ref="0x2aaaab5b4b90"/>
        <function-ref name="back" scoped="" ref="0x2aaaab5b2d78"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Receive" ref="0x2aaaab5c3080" loc="26:/home/robert/workspace/proj1/src/Node.nc">
      <component-ref qname="Node"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x2aaaab5c3080"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x2aaaab5c33d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Sender" ref="0x2aaaab6055d8" loc="31:/home/robert/workspace/proj1/src/Node.nc">
      <component-ref qname="Node"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Sender" scoped="" ref="0x2aaaab6055d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="SimpleSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x2aaaab605928"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x2aaaab44f728" loc="48:/home/robert/local/tinyos-2.1.1/tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TaskBasic" scoped="" ref="0x2aaaab44f728"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2aaaaab72160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2aaaab44fa78"/>
        <function-ref name="runTask" scoped="" ref="0x2aaaab44fc00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x2aaaab44ebe8" loc="47:/home/robert/local/tinyos-2.1.1/tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Scheduler" scoped="" ref="0x2aaaab44ebe8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2aaaab446020"/>
        <function-ref name="taskLoop" scoped="" ref="0x2aaaab4461a8"/>
        <function-ref name="runNextTask" scoped="" ref="0x2aaaab446330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x2aaaab5082b0" loc="56:/home/robert/local/tinyos-2.1.1/tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TaskBasic" scoped="" ref="0x2aaaab5082b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2aaaaab72160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2aaaab508600"/>
        <function-ref name="runTask" scoped="" ref="0x2aaaab508788"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuSleep" ref="0x2aaaab511758" loc="57:/home/robert/local/tinyos-2.1.1/tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuSleep" scoped="" ref="0x2aaaab511758"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="sleep" scoped="" ref="0x2aaaab511aa8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x2aaaab50a448" loc="55:/home/robert/local/tinyos-2.1.1/tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Scheduler" scoped="" ref="0x2aaaab50a448"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2aaaab50a798"/>
        <function-ref name="taskLoop" scoped="" ref="0x2aaaab50a920"/>
        <function-ref name="runNextTask" scoped="" ref="0x2aaaab50aaa8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerOverride" ref="0x2aaaab529988" loc="54:/home/robert/local/tinyos-2.1.1/tos/chips/atm128/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerOverride" scoped="" ref="0x2aaaab529988"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x2aaaab529cd8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuSleep" ref="0x2aaaab521660" loc="50:/home/robert/local/tinyos-2.1.1/tos/chips/atm128/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuSleep" scoped="" ref="0x2aaaab521660"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="sleep" scoped="" ref="0x2aaaab5219b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerState" ref="0x2aaaab52ca80" loc="51:/home/robert/local/tinyos-2.1.1/tos/chips/atm128/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerState" scoped="" ref="0x2aaaab52ca80"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x2aaaab52cdd0"/>
      </interface-functions>
    </interface>
  </interfaces>
  <interfacedefs>
    <interfacedef qname="SplitControl" loc="87:/home/robert/local/tinyos-2.1.1/tos/interfaces/SplitControl.nc">
      <documentation loc="72:/home/robert/local/tinyos-2.1.1/tos/interfaces/SplitControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.  It&#10; should be used for switching between the on and off power states of&#10; the component providing it.  For each &#60;code>start()&#60;/code> or&#10; &#60;code>stop()&#60;/code> command, if the command returns SUCCESS, then a&#10; corresponding  &#60;code>startDone()&#60;/code> or &#60;code>stopDone()&#60;/code> event&#10; must be signalled.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function event="" provided="0" name="startDone" ref="0x2aaaab5c1020" loc="113:/home/robert/local/tinyos-2.1.1/tos/interfaces/SplitControl.nc">
        <documentation loc="106:/home/robert/local/tinyos-2.1.1/tos/interfaces/SplitControl.nc">
          <short> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.</short>
          <long> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned on, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x2aaaab4531a8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x2aaaab5c2ca0" loc="113:/home/robert/local/tinyos-2.1.1/tos/interfaces/SplitControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x2aaaab4531a8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="stopDone" ref="0x2aaaab5d0430" loc="138:/home/robert/local/tinyos-2.1.1/tos/interfaces/SplitControl.nc">
        <documentation loc="132:/home/robert/local/tinyos-2.1.1/tos/interfaces/SplitControl.nc">
          <short>&#10; Notify caller that the component has been stopped.</short>
          <long>&#10; Notify caller that the component has been stopped.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned off, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x2aaaab4531a8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x2aaaab5d01c0" loc="138:/home/robert/local/tinyos-2.1.1/tos/interfaces/SplitControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x2aaaab4531a8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x2aaaab5c2328" loc="104:/home/robert/local/tinyos-2.1.1/tos/interfaces/SplitControl.nc">
        <documentation loc="89:/home/robert/local/tinyos-2.1.1/tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         starting or the device was off and the device is now ready to turn &#10;         on.  After receiving this return value, you should expect a &#10;         &#60;code>startDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering down&#10;               i.e. a &#60;code>stop()&#60;/code> command has been called,&#10;               and a &#60;code>stopDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already on &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2aaaab4531a8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x2aaaab5c1808" loc="130:/home/robert/local/tinyos-2.1.1/tos/interfaces/SplitControl.nc">
        <documentation loc="115:/home/robert/local/tinyos-2.1.1/tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         stopping or the device was on and the device is now ready to turn &#10;         off.  After receiving this return value, you should expect a &#10;         &#60;code>stopDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering up&#10;               i.e. a &#60;code>start()&#60;/code> command has been called,&#10;               and a &#60;code>startDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already off &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2aaaab4531a8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Boot" loc="50:/home/robert/local/tinyos-2.1.1/tos/interfaces/Boot.nc">
      <documentation loc="42:/home/robert/local/tinyos-2.1.1/tos/interfaces/Boot.nc">
        <short>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.</short>
        <long>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10;</long>
      </documentation>
      <function event="" provided="0" name="booted" ref="0x2aaaab5b3580" loc="60:/home/robert/local/tinyos-2.1.1/tos/interfaces/Boot.nc">
        <documentation loc="51:/home/robert/local/tinyos-2.1.1/tos/interfaces/Boot.nc">
          <short>&#10; Signaled when the system has booted successfully.</short>
          <long>&#10; Signaled when the system has booted successfully. Components can&#10; assume the system has been initialized properly. Services may&#10; need to be started to work, however.&#10;&#10; @see StdControl&#10; @see SplitConrol&#10; @see TEP 107: Boot Sequence&#10;</long>
        </documentation>
        <interfacedef-ref qname="Boot"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Timer" loc="53:/home/robert/local/tinyos-2.1.1/tos/lib/timer/Timer.nc">
      <documentation loc="36:/home/robert/local/tinyos-2.1.1/tos/lib/timer/Timer.nc">
        <short>&#10; A Timer is TinyOS's general purpose timing interface.</short>
        <long>&#10; A Timer is TinyOS's general purpose timing interface. For more precise&#10; timing, you may wish to use a (platform-specific) component offering&#10; an Alarm interface.&#10;&#10; &#60;p>A Timer is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x2aaaab5c3db8" loc="53:/home/robert/local/tinyos-2.1.1/tos/lib/timer/Timer.nc">
          <interfacedef-ref qname="Timer"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x2aaaab5c3db8"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x2aaaab5eb918" loc="136:/home/robert/local/tinyos-2.1.1/tos/lib/timer/Timer.nc">
        <documentation loc="132:/home/robert/local/tinyos-2.1.1/tos/lib/timer/Timer.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2aaaaab73608"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x2aaaab5ef258" loc="83:/home/robert/local/tinyos-2.1.1/tos/lib/timer/Timer.nc">
        <documentation loc="80:/home/robert/local/tinyos-2.1.1/tos/lib/timer/Timer.nc">
          <short>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).</short>
          <long>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodicAt" ref="0x2aaaab5ec020" loc="114:/home/robert/local/tinyos-2.1.1/tos/lib/timer/Timer.nc">
        <documentation loc="100:/home/robert/local/tinyos-2.1.1/tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. The &#60;code>fired&#60;/code> will be signaled every&#10; dt units (first event at t0+dt units). Periodic timers set in the past&#10; will get a bunch of events in succession, until the timer &#34;catches up&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2aaaaab73608"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2aaaaab73608"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x2aaaab5ee910" loc="114:/home/robert/local/tinyos-2.1.1/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2aaaaab73608"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x2aaaab5eec28" loc="114:/home/robert/local/tinyos-2.1.1/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2aaaaab73608"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isOneShot" ref="0x2aaaab5ee1d8" loc="98:/home/robert/local/tinyos-2.1.1/tos/lib/timer/Timer.nc">
        <documentation loc="94:/home/robert/local/tinyos-2.1.1/tos/lib/timer/Timer.nc">
          <short>&#10; Check if this is a one-shot timer.</short>
          <long>&#10; Check if this is a one-shot timer.&#10; @return TRUE for one-shot timers, FALSE for periodic timers.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2aaaab4409b8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getdt" ref="0x2aaaab5ea878" loc="151:/home/robert/local/tinyos-2.1.1/tos/lib/timer/Timer.nc">
        <documentation loc="146:/home/robert/local/tinyos-2.1.1/tos/lib/timer/Timer.nc">
          <short>&#10; Return the delay or period for the previously started timer.</short>
          <long>&#10; Return the delay or period for the previously started timer. The next&#10; fired event will occur at gett0() + getdt().&#10; @return Timer's interval.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2aaaaab73608"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="gett0" ref="0x2aaaab5ea070" loc="144:/home/robert/local/tinyos-2.1.1/tos/lib/timer/Timer.nc">
        <documentation loc="138:/home/robert/local/tinyos-2.1.1/tos/lib/timer/Timer.nc">
          <short>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers.</short>
          <long>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers. The next fired event will occur&#10; at gett0() + getdt().&#10; @return Timer's base time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2aaaaab73608"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x2aaaab5ef9d0" loc="92:/home/robert/local/tinyos-2.1.1/tos/lib/timer/Timer.nc">
        <documentation loc="86:/home/robert/local/tinyos-2.1.1/tos/lib/timer/Timer.nc">
          <short>&#10; Check if timer is running.</short>
          <long>&#10; Check if timer is running. Periodic timers run until stopped or&#10; replaced, one-shot timers run until their deadline expires.&#10;&#10; @return TRUE if the timer is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2aaaab4409b8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodic" ref="0x2aaaab5e18f0" loc="64:/home/robert/local/tinyos-2.1.1/tos/lib/timer/Timer.nc">
        <documentation loc="56:/home/robert/local/tinyos-2.1.1/tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. Equivalent to startPeriodicAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled every dt units (first&#10; event in dt units).&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2aaaaab73608"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x2aaaab5e1680" loc="64:/home/robert/local/tinyos-2.1.1/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2aaaaab73608"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShotAt" ref="0x2aaaab5eb020" loc="129:/home/robert/local/tinyos-2.1.1/tos/lib/timer/Timer.nc">
        <documentation loc="116:/home/robert/local/tinyos-2.1.1/tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to time t0+dt.</short>
          <long>&#10; Set a single-short timer to time t0+dt. Replaces any current timer&#10; settings. The &#60;code>fired&#60;/code> will be signaled when the timer&#10; expires. Timers set in the past will fire &#34;soon&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2aaaaab73608"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2aaaaab73608"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x2aaaab5ec950" loc="129:/home/robert/local/tinyos-2.1.1/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2aaaaab73608"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x2aaaab5ecc68" loc="129:/home/robert/local/tinyos-2.1.1/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2aaaaab73608"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShot" ref="0x2aaaab5f0378" loc="73:/home/robert/local/tinyos-2.1.1/tos/lib/timer/Timer.nc">
        <documentation loc="66:/home/robert/local/tinyos-2.1.1/tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to some time units in the future.</short>
          <long>&#10; Set a single-short timer to some time units in the future. Replaces&#10; any current timer settings. Equivalent to startOneShotAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled when the timer expires.&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2aaaaab73608"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x2aaaab5f0108" loc="73:/home/robert/local/tinyos-2.1.1/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2aaaaab73608"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x2aaaab5f0b20" loc="78:/home/robert/local/tinyos-2.1.1/tos/lib/timer/Timer.nc">
        <documentation loc="75:/home/robert/local/tinyos-2.1.1/tos/lib/timer/Timer.nc">
          <short>&#10; Cancel a timer.</short>
          <long>&#10; Cancel a timer.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Random" loc="40:/home/robert/local/tinyos-2.1.1/tos/interfaces/Random.nc">
      <documentation loc="34:/home/robert/local/tinyos-2.1.1/tos/interfaces/Random.nc">
        <short> &#10; Interface for generating 16-bit and 32-bit random numbers.</short>
        <long> &#10; Interface for generating 16-bit and 32-bit random numbers.&#10;&#10; @author Barbara Hohlt &#10; @date   March 1 2005 &#10;</long>
      </documentation>
      <function command="" provided="0" name="rand16" ref="0x2aaaab5c5a40" loc="52:/home/robert/local/tinyos-2.1.1/tos/interfaces/Random.nc">
        <documentation loc="48:/home/robert/local/tinyos-2.1.1/tos/interfaces/Random.nc">
          <short> &#10; Produces a 32-bit pseudorandom number.</short>
          <long> &#10; Produces a 32-bit pseudorandom number. &#10; @return Returns low 16 bits of the pseudorandom number.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Random"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2aaaaab72b98"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="rand32" ref="0x2aaaab5c52a8" loc="46:/home/robert/local/tinyos-2.1.1/tos/interfaces/Random.nc">
        <documentation loc="42:/home/robert/local/tinyos-2.1.1/tos/interfaces/Random.nc">
          <short> &#10; Produces a 32-bit pseudorandom number.</short>
          <long> &#10; Produces a 32-bit pseudorandom number. &#10; @return Returns the 32-bit pseudorandom number.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Random"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2aaaaab73608"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Pool" loc="50:/home/robert/local/tinyos-2.1.1/tos/interfaces/Pool.nc">
      <documentation loc="33:/home/robert/local/tinyos-2.1.1/tos/interfaces/Pool.nc">
        <short>&#10;  An allocation pool of a specific type memory objects.</short>
        <long>&#10;  An allocation pool of a specific type memory objects.&#10;  The Pool allows components to allocate (&#60;code>get&#60;/code>)&#10;  and deallocate (&#60;code>put&#60;/code>) elements. The pool&#10;  does not require that deallocations be items which were&#10;  originally allocated. E.g., a program can create two&#10;  pools of the same type and pass items between them.&#10;  This allows, for example, a component to allocate a pool&#10;  of message buffers and freely buffer swap them on&#10;  Receive.receive events.&#10;&#10;  @author Philip Levis&#10;  @author Kyle Jamieson&#10;  @date   $Date: 2008-06-04 03:00:31 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="t" ref="0x2aaaab600418" loc="50:/home/robert/local/tinyos-2.1.1/tos/interfaces/Pool.nc">
          <interfacedef-ref qname="Pool"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x2aaaab600418"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x2aaaab5fa360" loc="97:/home/robert/local/tinyos-2.1.1/tos/interfaces/Pool.nc">
        <documentation loc="91:/home/robert/local/tinyos-2.1.1/tos/interfaces/Pool.nc">
          <short>&#10; Allocate an element from the pool.</short>
          <long>&#10; Allocate an element from the pool.&#10;&#10; @return 't* ONE_NOK' A pointer if the pool is not empty, NULL if&#10; the pool is empty.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Pool"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x2aaaab600418"/></type-var>
          </type-pointer>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="maxSize" ref="0x2aaaab5fdca0" loc="80:/home/robert/local/tinyos-2.1.1/tos/interfaces/Pool.nc">
        <documentation loc="74:/home/robert/local/tinyos-2.1.1/tos/interfaces/Pool.nc">
          <short>&#10; Returns the maximum number of elements in the pool&#10; (the size of a full pool).</short>
          <long>&#10; Returns the maximum number of elements in the pool&#10; (the size of a full pool).&#10;&#10; @return Maximum size.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Pool"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2aaaaab72160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="empty" ref="0x2aaaab600c40" loc="61:/home/robert/local/tinyos-2.1.1/tos/interfaces/Pool.nc">
        <documentation loc="52:/home/robert/local/tinyos-2.1.1/tos/interfaces/Pool.nc">
          <short>&#10; Returns whether there any elements remaining in the pool.</short>
          <long>&#10; Returns whether there any elements remaining in the pool.&#10; If empty returns TRUE, then &#60;code>get&#60;/code> will return&#10; NULL. If empty returns FALSE, then &#60;code>get&#60;/code> will&#10; return a pointer to an object.&#10;&#10; @return Whether the pool is empty.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Pool"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2aaaab4409b8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="put" ref="0x2aaaab5fc698" loc="89:/home/robert/local/tinyos-2.1.1/tos/interfaces/Pool.nc">
        <documentation loc="82:/home/robert/local/tinyos-2.1.1/tos/interfaces/Pool.nc">
          <short>&#10; Deallocate an object, putting it back into the pool.</short>
          <long>&#10; Deallocate an object, putting it back into the pool.&#10;&#10; @param 't* ONE newVal'&#10; @return SUCCESS if the entry was put in successfully, FAIL&#10; if the pool is full.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Pool"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2aaaab4531a8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x2aaaab600418"/></type-var>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="newVal" ref="0x2aaaab5fc428" loc="89:/home/robert/local/tinyos-2.1.1/tos/interfaces/Pool.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x2aaaab600418"/></type-var>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="size" ref="0x2aaaab5fd490" loc="72:/home/robert/local/tinyos-2.1.1/tos/interfaces/Pool.nc">
        <documentation loc="63:/home/robert/local/tinyos-2.1.1/tos/interfaces/Pool.nc">
          <short>&#10; Returns how many elements are in the pool.</short>
          <long>&#10; Returns how many elements are in the pool. If size&#10; returns 0, empty() will return TRUE. If size returns&#10; a non-zero value, empty() will return FALSE. The&#10; return value of size is always &#38;lte; the return&#10; value of maxSize().&#10;&#10; @return How many elements are in the pool.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Pool"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2aaaaab72160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="List" loc="10:/home/robert/workspace/proj1/src/dataStructures/interfaces/List.nc">
      <documentation loc="1:/home/robert/workspace/proj1/src/dataStructures/interfaces/List.nc">
        <short>&#10; ANDES Lab - University of California, Merced&#10; This class provides a simple list.</short>
        <long>&#10; ANDES Lab - University of California, Merced&#10; This class provides a simple list.&#10;&#10; @author UCM ANDES Lab&#10; @date   2013/09/03&#10; &#10;</long>
      </documentation>
      <parameters>
        <typedef name="t" ref="0x2aaaab5b53e8" loc="10:/home/robert/workspace/proj1/src/dataStructures/interfaces/List.nc">
          <interfacedef-ref qname="List"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x2aaaab5b53e8"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="size" ref="0x2aaaab5bee08" loc="18:/home/robert/workspace/proj1/src/dataStructures/interfaces/List.nc">
        <interfacedef-ref qname="List"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2aaaaab72b98"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="front" ref="0x2aaaab5bfa40" loc="15:/home/robert/workspace/proj1/src/dataStructures/interfaces/List.nc">
        <interfacedef-ref qname="List"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x2aaaab5b53e8"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isEmpty" ref="0x2aaaab5be768" loc="17:/home/robert/workspace/proj1/src/dataStructures/interfaces/List.nc">
        <interfacedef-ref qname="List"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2aaaab4409b8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x2aaaab5bd708" loc="19:/home/robert/workspace/proj1/src/dataStructures/interfaces/List.nc">
        <interfacedef-ref qname="List"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x2aaaab5b53e8"/></type-var>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2aaaaab72b98"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="position" ref="0x2aaaab5bd498" loc="19:/home/robert/workspace/proj1/src/dataStructures/interfaces/List.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2aaaaab72b98"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="remove" ref="0x2aaaab5bb6a8" loc="21:/home/robert/workspace/proj1/src/dataStructures/interfaces/List.nc">
        <interfacedef-ref qname="List"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x2aaaab5b53e8"/></type-var>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2aaaaab72b98"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="position" ref="0x2aaaab5bb438" loc="21:/home/robert/workspace/proj1/src/dataStructures/interfaces/List.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2aaaaab72b98"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isFull" ref="0x2aaaab5bdd90" loc="20:/home/robert/workspace/proj1/src/dataStructures/interfaces/List.nc">
        <interfacedef-ref qname="List"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2aaaab4409b8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="pushback" ref="0x2aaaab5b5e00" loc="11:/home/robert/workspace/proj1/src/dataStructures/interfaces/List.nc">
        <interfacedef-ref qname="List"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x2aaaab5b53e8"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="input" ref="0x2aaaab5b5b90" loc="11:/home/robert/workspace/proj1/src/dataStructures/interfaces/List.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x2aaaab5b53e8"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="popfront" ref="0x2aaaab5bf3e0" loc="14:/home/robert/workspace/proj1/src/dataStructures/interfaces/List.nc">
        <interfacedef-ref qname="List"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x2aaaab5b53e8"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="popback" ref="0x2aaaab5b1d40" loc="13:/home/robert/workspace/proj1/src/dataStructures/interfaces/List.nc">
        <interfacedef-ref qname="List"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x2aaaab5b53e8"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="pushfront" ref="0x2aaaab5b16d0" loc="12:/home/robert/workspace/proj1/src/dataStructures/interfaces/List.nc">
        <interfacedef-ref qname="List"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x2aaaab5b53e8"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="input" ref="0x2aaaab5b1460" loc="12:/home/robert/workspace/proj1/src/dataStructures/interfaces/List.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x2aaaab5b53e8"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="back" ref="0x2aaaab5be0d8" loc="16:/home/robert/workspace/proj1/src/dataStructures/interfaces/List.nc">
        <interfacedef-ref qname="List"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x2aaaab5b53e8"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Receive" loc="56:/home/robert/local/tinyos-2.1.1/tos/interfaces/Receive.nc">
      <function event="" provided="0" name="receive" ref="0x2aaaab5e59c8" loc="78:/home/robert/local/tinyos-2.1.1/tos/interfaces/Receive.nc">
        <documentation loc="58:/home/robert/local/tinyos-2.1.1/tos/interfaces/Receive.nc">
          <short>&#10; Receive a packet buffer, returning a buffer for the signaling&#10; component to use for the next reception.</short>
          <long>&#10; Receive a packet buffer, returning a buffer for the signaling&#10; component to use for the next reception. The return value&#10; can be the same as &#60;tt>msg&#60;/tt>, as long as the handling&#10; component copies out the data it needs.&#10;&#10; &#60;b>Note&#60;/b> that misuse of this interface is one of the most&#10; common bugs in TinyOS code. For example, if a component both calls a&#10; send on the passed message and returns it, then it is possible&#10; the buffer will be reused before the send occurs, overwriting&#10; the component's data. This would cause the mote to possibly&#10; instead send a packet it most recently received.&#10;&#10; @param  'message_t* ONE msg'        the receied packet&#10; @param  'void* COUNT(len) payload'  a pointer to the packet's payload&#10; @param  len      the length of the data region pointed to by payload&#10; @return 'message_t* ONE'              a packet buffer for the stack to use for the next&#10;                  received packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Receive"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2aaaab5e8338"/>
              <typename><typedef-ref name="message_t" ref="0x2aaaab5e7880"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2aaaab5e8338"/>
                <typename><typedef-ref name="message_t" ref="0x2aaaab5e7880"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2aaaaab72160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x2aaaab5e50c8" loc="78:/home/robert/local/tinyos-2.1.1/tos/interfaces/Receive.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2aaaab5e8338"/>
                <typename><typedef-ref name="message_t" ref="0x2aaaab5e7880"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="payload" ref="0x2aaaab5e53f0" loc="78:/home/robert/local/tinyos-2.1.1/tos/interfaces/Receive.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x2aaaab5e5700" loc="78:/home/robert/local/tinyos-2.1.1/tos/interfaces/Receive.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2aaaaab72160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SimpleSend" loc="3:/home/robert/workspace/proj1/src/lib/interfaces/SimpleSend.nc">
      <function command="" provided="0" name="send" ref="0x2aaaab6052a0" loc="4:/home/robert/workspace/proj1/src/lib/interfaces/SimpleSend.nc">
        <interfacedef-ref qname="SimpleSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2aaaab4531a8"/></typename>
          </type-int>
          <function-parameters>
            <type-tag size="I:28" alignment="I:1"><nx_struct-ref name="pack" ref="0x2aaaab587120"/>
              <typename><typedef-ref name="pack" ref="0x2aaaab586568"/></typename>
            </type-tag>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2aaaaab72b98"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x2aaaab608c68" loc="4:/home/robert/workspace/proj1/src/lib/interfaces/SimpleSend.nc">
            <type-tag size="I:28" alignment="I:1"><nx_struct-ref name="pack" ref="0x2aaaab587120"/>
              <typename><typedef-ref name="pack" ref="0x2aaaab586568"/></typename>
            </type-tag>
          </variable>
          <variable name="dest" ref="0x2aaaab605020" loc="4:/home/robert/workspace/proj1/src/lib/interfaces/SimpleSend.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2aaaaab72b98"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TaskBasic" loc="55:/home/robert/local/tinyos-2.1.1/tos/interfaces/TaskBasic.nc">
      <function command="" provided="0" name="postTask" ref="0x2aaaab450608" loc="67:/home/robert/local/tinyos-2.1.1/tos/interfaces/TaskBasic.nc">
        <documentation loc="57:/home/robert/local/tinyos-2.1.1/tos/interfaces/TaskBasic.nc">
          <short>&#10; Post this task to the TinyOS scheduler.</short>
          <long>&#10; Post this task to the TinyOS scheduler. At some later time,&#10; depending on the scheduling policy, the scheduler will signal the&#10; &#60;tt>run()&#60;/tt> event. &#10;&#10; @return SUCCESS if task was successfuly&#10; posted; the semantics of a non-SUCCESS return value depend on the&#10; implementation of this interface (the class of task).&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2aaaab4531a8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="runTask" ref="0x2aaaab450df8" loc="75:/home/robert/local/tinyos-2.1.1/tos/interfaces/TaskBasic.nc">
        <documentation loc="69:/home/robert/local/tinyos-2.1.1/tos/interfaces/TaskBasic.nc">
          <short>&#10; Event from the scheduler to run this task.</short>
          <long>&#10; Event from the scheduler to run this task. Following the TinyOS&#10; concurrency model, the codes invoked from &#60;tt>run()&#60;/tt> signals&#10; execute atomically with respect to one another, but can be&#10; preempted by async commands/events.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Scheduler" loc="52:/home/robert/local/tinyos-2.1.1/tos/interfaces/Scheduler.nc">
      <documentation loc="42:/home/robert/local/tinyos-2.1.1/tos/interfaces/Scheduler.nc">
        <short> &#10; The interface to a TinyOS task scheduler.</short>
        <long> &#10; The interface to a TinyOS task scheduler.&#10;&#10; @author Philip Levis&#10; @date   January 19 2005&#10; @see TEP 106: Tasks and Schedulers&#10; @see TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x2aaaab442978" loc="57:/home/robert/local/tinyos-2.1.1/tos/interfaces/Scheduler.nc">
        <documentation loc="54:/home/robert/local/tinyos-2.1.1/tos/interfaces/Scheduler.nc">
          <short> &#10; Initialize the scheduler.</short>
          <long> &#10; Initialize the scheduler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="taskLoop" ref="0x2aaaab44e878" loc="72:/home/robert/local/tinyos-2.1.1/tos/interfaces/Scheduler.nc">
        <documentation loc="67:/home/robert/local/tinyos-2.1.1/tos/interfaces/Scheduler.nc">
          <short>&#10; Enter an infinite task-running loop.</short>
          <long>&#10; Enter an infinite task-running loop. Put the MCU into a low power&#10; state when the processor is idle (task queue empty, waiting for&#10; interrupts). This call never returns.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="runNextTask" ref="0x2aaaab44e0d8" loc="65:/home/robert/local/tinyos-2.1.1/tos/interfaces/Scheduler.nc">
        <documentation loc="59:/home/robert/local/tinyos-2.1.1/tos/interfaces/Scheduler.nc">
          <short> &#10; Run the next task if one is waiting, otherwise return immediately.</short>
          <long> &#10; Run the next task if one is waiting, otherwise return immediately. &#10;&#10; @return        whether a task was run -- TRUE indicates a task&#10;                ran, FALSE indicates there was no task to run.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2aaaab4409b8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuSleep" loc="74:/home/robert/local/tinyos-2.1.1/tos/interfaces/McuSleep.nc">
      <documentation loc="63:/home/robert/local/tinyos-2.1.1/tos/interfaces/McuSleep.nc">
        <short>&#10; Interface to instruct the MCU to enter a low power state.</short>
        <long>&#10; Interface to instruct the MCU to enter a low power state. TEP112&#10; describes how an MCU computes this state and how the Scheduler uses&#10; this interface to manage system power draw.&#10; &#10; @author Philip Levis&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @date   Oct 26, 2005&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="sleep" ref="0x2aaaab511450" loc="76:/home/robert/local/tinyos-2.1.1/tos/interfaces/McuSleep.nc">
        <documentation loc="75:/home/robert/local/tinyos-2.1.1/tos/interfaces/McuSleep.nc">
          <short> Called by the scheduler to put the MCU to sleep.</short>
          <long> Called by the scheduler to put the MCU to sleep. *</long>
        </documentation>
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerOverride" loc="50:/home/robert/local/tinyos-2.1.1/tos/interfaces/McuPowerOverride.nc">
      <documentation loc="1:/home/robert/local/tinyos-2.1.1/tos/platforms/btnode3/hardware.h">
        <short>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.</short>
        <long>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2006-2007 ETH Zurich.&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;  @author Jan Beutel &#60;j.beutel@ieee.org>&#10; &#10;  $Id: hardware.h,v 1.9 2010-06-29 22:07:52 scipio Exp $&#10;</long>
      </documentation>
      <function command="" provided="0" name="lowestState" ref="0x2aaaab5294f8" loc="62:/home/robert/local/tinyos-2.1.1/tos/interfaces/McuPowerOverride.nc">
        <documentation loc="52:/home/robert/local/tinyos-2.1.1/tos/interfaces/McuPowerOverride.nc">
          <short>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound.</short>
          <long>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound. Because&#10; this command originates deep within the basic TinyOS scheduling&#10; mechanisms, it should be used very sparingly. Refer to TEP 112 for&#10; details.&#10;&#10; @return    the lowest power state the system can enter to meet the &#10;            requirements of this component&#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerOverride"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="mcu_power_t" ref="0x2aaaab4ad940"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerState" loc="46:/home/robert/local/tinyos-2.1.1/tos/interfaces/McuPowerState.nc">
      <documentation loc="35:/home/robert/local/tinyos-2.1.1/tos/interfaces/McuPowerState.nc">
        <short>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed.</short>
        <long>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed. TEP 112 describes how an MCU computes this state&#10; and how the Scheduler uses this interface to manage system power&#10; draw.&#10; &#10; @author Philip Levis&#10; @date   Oct 26, 2005&#10; @see    TEP 112: Microcontroller Power Management&#10;</long>
      </documentation>
      <function command="" provided="0" name="update" ref="0x2aaaab52c6d8" loc="52:/home/robert/local/tinyos-2.1.1/tos/interfaces/McuPowerState.nc">
        <documentation loc="47:/home/robert/local/tinyos-2.1.1/tos/interfaces/McuPowerState.nc">
          <short> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed.</short>
          <long> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed. Generally, this should be&#10; called whenever a peripheral/timer is started/stopped. &#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerState"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
  </interfacedefs>
  <tags>
  </tags>
  <variables>
  </variables>
  <constants>
  </constants>
  <functions>
  </functions>
  <typedefs>
  </typedefs>
</nesc>
